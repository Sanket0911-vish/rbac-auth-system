// middleware/authMiddleware.js
const { verifyToken } = require('../utils/jwtUtil');
const User = require('../models/user');
const Role = require('../models/role');
const Permission = require('../models/permission');

async function authenticate(req, res, next) {
    const token = req.headers['authorization']?.split(' ')[1];
    if (!token) return res.status(403).json({ message: 'Token is required' });

    const decoded = verifyToken(token);
    if (!decoded) return res.status(401).json({ message: 'Invalid token' });

    const user = await User.findByUsername(decoded.username);
    if (!user) return res.status(404).json({ message: 'User not found' });

    req.user = user;
    next();
}

async function authorize(permissions) {
    return async (req, res, next) => {
        const userPermissions = await Permission.findByRoleId(req.user.roleId);
        const hasPermission = userPermissions.some(p => permissions.includes(p.PermissionName));

        if (!hasPermission) return res.status(403).json({ message: 'Forbidden' });

        next();
    };
}

module.exports = { authenticate, authorize };
